#!/usr/bin/python3
from models.state import State
from models import storage
from api.v1.views import app_views
from flask import jsonify, abort, make_response, request

@app_views.route('/states', methods=['GET'], strict_slashes=False)
def get_object():
    """ Retrieves all State objects from storage"""
    all = storage.all("State").values()
    list = []
    for i in all:
        list.append(all.to_dict())
    return jsonify(list)

@app_views.route('/states/<state_id>', methods=['GET'], strict_slashes=False)
def get_state_id(state_id):
    """ Retrieves a specific state from storage"""
    state = storage.get("State", state_id)
    if not state:
        abort(404)
    return jsonify(state.to_dict())

@app_views.route('/states/<state_id>', methods=['DELETE'], strict_slashes=False)
def del_state_id(state_id):
    """Deletes a specific state object """
    state_obj = storage.get(State, state_id)
    if not state_obj:
        abort(404)
    storage.delete(state)
    storage.save()
    return make_response(jsonify({}), 200)
@app_views.route('/api/v1/states', methods=['POST'])
def post():
    """creates a new state"""
    if not request.get_json():
        abort(400, description="Missing name")

    req = request.get_json()
    obj = State(**req)
    obj.save()
    return make_response(jsonify(obj.to_dict()), 201)
@app_views.route('/states/<state_id>', methods=['PUT'], strict_slashes=False)
def put_state(state_id):
    """ adds a state """
    state_obj = storage.get(State, state_id)
    if not state_obj:
        abort(404)
    if not request.get_json():
        abort(400, description="Not a JSON")
    ojs = ['id', 'created_at', 'updated_at']
    data = request.get_json()
    for key, value in data.items():
        if not key in objs:
            setattr(state, key, value)
    storage.save()
    return make_response(jsonify(state.to_dict()), 200)
